'From Pharo3.0 of 18 March 2013 [Latest update: #30847] on 8 May 2014 at 2:16:15.578689 pm'!Object subclass: #TextConverter	instanceVariableNames: 'latin1Map latin1Encodings'	classVariableNames: ''	poolDictionaries: 'EventSensorConstants'	category: 'Multilingual-TextConversion'!!TextConverter commentStamp: '<historical>' prior: 0!The abstract class for all different type of text converters.  nextFromStream: and nextPut:toStream: are the public accessible methods.  If you are going to make a subclass for a stateful text conversion, you should override restoreStateOf:with: and saveStateOf: along the line of CompoundTextConverter.!!TextConverter methodsFor: 'initialize-release' stamp: 'HenrikSperreJohansen 1/27/2010 18:03'!installLineEndConvention: lineEndStringOrNil		lineEndStringOrNil ifNotNil:		[latin1Encodings := latin1Encodings copy.		latin1Encodings at: Character cr asciiValue + 1 put: (self convertFromSystemString: lineEndStringOrNil).		latin1Map := ByteString nonAsciiMap copy.		latin1Map at: Character cr asciiValue + 1 put: 1]! !!TextConverter methodsFor: 'conversion' stamp: 'yo 8/19/2002 15:27'!nextPut: aCharacter toStream: aStream	self subclassResponsibility.! !!TextConverter methodsFor: 'conversion' stamp: 'michael.rueger 1/27/2009 18:12'!convertFromSystemString: aString	| readStream writeStream |	readStream := aString readStream.	writeStream := String new writeStream.	[readStream atEnd] whileFalse: [		writeStream nextPut: (self nextFromStream: readStream)].	^writeStream contents! !!TextConverter methodsFor: 'conversion' stamp: 'HenrikSperreJohansen 8/10/2010 15:55'!nextPutAll: aString toStream: aStream	"Handle fast conversion if ByteString"		| lastIndex nextIndex |	aString class == ByteString ifFalse: [		aString do: [:char | self nextPut: char toStream: aStream].		^self].		aStream isBinary ifTrue: [		aStream basicNextPutAll: aString.		^self].	self nextPutByteString: aString toStream: aStream.	^self! !!TextConverter methodsFor: 'conversion' stamp: 'HenrikSperreJohansen 8/17/2012 11:31'!next: anInteger putAll: aString startingAt: startIndex toStream: aStream        "Handle fast conversion if ByteString"                | lastIndex nextIndex |        aString class == ByteString ifFalse: [                startIndex to: startIndex + anInteger - 1 do: [ :index |                        self nextPut: (aString at: index) toStream: aStream ].                ^aString ].        aStream isBinary ifTrue: [                aStream basicNext: anInteger putAll: aString startingAt: startIndex.                ^aString ].                ^self next: anInteger putByteString: aString startingAt: startIndex toStream: aStream! !!TextConverter methodsFor: 'conversion' stamp: 'yo 8/19/2002 15:27'!nextFromStream: aStream	self subclassResponsibility.! !!TextConverter methodsFor: 'conversion' stamp: 'HenrikSperreJohansen 1/27/2010 18:07'!convertToSystemString: aString	| writeStream |	writeStream := String new writeStream.	self nextPutAll: aString toStream: writeStream.	self emitSequenceToResetStateIfNeededOn: writeStream.	^writeStream contents! !!TextConverter methodsFor: 'initialization' stamp: 'HenrikSperreJohansen 2/5/2010 20:24'!initialize	latin1Map := self class latin1Map.	latin1Encodings := self class latin1Encodings.! !!TextConverter methodsFor: 'private' stamp: 'HenrikSperreJohansen 8/17/2012 11:31'!next: anAmount putByteString: aString startingAt: startIndex toStream: aStream	"This is a reasonable default which speeds up conversion of encodings which have a partial match with latin1 encoding (for instance ascii supersets)"	| lastIndex nextIndex |	lastIndex := startIndex.	[nextIndex := ByteString findFirstInString: aString inSet: latin1Map startingAt: lastIndex.	nextIndex = 0 or: [nextIndex >= (startIndex + anAmount) ]] whileFalse:		[aStream next: nextIndex-lastIndex putAll: aString startingAt: lastIndex.		aStream basicNextPutAll: (latin1Encodings at: (aString byteAt: nextIndex)+1).		lastIndex := nextIndex + 1].	aStream basicNext: anAmount - lastIndex + startIndex putAll: aString startingAt: lastIndex.! !!TextConverter methodsFor: 'private' stamp: 'HenrikSperreJohansen 8/17/2012 11:36'!nextPutByteString: aString toStream: aStream	"This is a reasonable default which speeds up conversion of encodings which have a partial match with latin1 encoding (for instance ascii supersets)"	| lastIndex nextIndex |	lastIndex := 1.	[nextIndex := ByteString findFirstInString: aString inSet: latin1Map startingAt: lastIndex.	nextIndex = 0] whileFalse:		[aStream next: nextIndex-lastIndex putAll: aString startingAt: lastIndex.		aStream basicNextPutAll: (latin1Encodings at: (aString byteAt: nextIndex)+1).		lastIndex := nextIndex + 1].	aStream basicNext: aString size-lastIndex+1 putAll: aString startingAt: lastIndex.! !!TextConverter methodsFor: 'friend' stamp: 'yo 2/21/2004 03:59'!saveStateOf: aStream	^ aStream position.! !!TextConverter methodsFor: 'friend' stamp: 'yo 7/29/2003 15:51'!emitSequenceToResetStateIfNeededOn: aStream! !!TextConverter methodsFor: 'friend' stamp: 'yo 2/21/2004 03:26'!restoreStateOf: aStream with: aConverterState	aStream position: aConverterState.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TextConverter class	instanceVariableNames: 'latin1Map latin1Encodings'!!TextConverter class commentStamp: '<historical>' prior: 0!!!TextConverter class methodsFor: 'utilities' stamp: 'yo 8/19/2002 15:28'!encodingNames 	^ #() copy.! !!TextConverter class methodsFor: 'utilities' stamp: 'yo 7/5/2004 19:41'!allEncodingNames	"TextConverter allEncodingNames"	| encodingNames |	encodingNames := Set new.	self allSubclasses		do: [:each | 			| names | 			names := each encodingNames.			names notEmpty				ifTrue: [encodingNames add: names first asSymbol]].	^encodingNames! !!TextConverter class methodsFor: 'instance creation' stamp: 'GabrielOmarCotelli 12/4/2013 09:57'!newForEncoding: aString	| encoding |	aString ifNil: [ ^ Latin1TextConverter new ].	encoding := aString asLowercase.	^ self allSubclasses		detect: [ :each | each encodingNames includes: encoding ]		ifFound: [ :class | class new ]		ifNone: [ nil ]! !!TextConverter class methodsFor: 'instance creation' stamp: 'yo 12/28/2003 00:54'!default	^ UTF8TextConverter new.! !!TextConverter class methodsFor: 'instance creation' stamp: 'mir 7/20/2004 15:51'!defaultSystemConverter	^LanguageEnvironment defaultSystemConverter! !!TextConverter class methodsFor: 'instance creation' stamp: 'yo 7/25/2003 14:08'!defaultConverterClassForEncoding: encodingName	"TextConverter defaultConverterClassForEncoding: 'shift-jis'"	^ self allSubclasses		detect: [:class | class encodingNames includes: encodingName]		ifNone: []! !!TextConverter class methodsFor: 'accessing' stamp: 'nice 5/9/2009 23:35'!latin1Encodings	"Answer an Array mapping latin1 characters to conversion string"	^latin1Encodings ifNil:		[self initializeLatin1MapAndEncodings.		latin1Encodings]! !!TextConverter class methodsFor: 'accessing' stamp: 'nice 5/10/2009 00:45'!initializeLatin1MapAndEncodings	"Initialize the latin1Map and latin1Encodings.	These variables ensure that conversions from latin1 ByteString is reasonably fast"		| latin1 utf8 |	latin1Map := ByteArray new: 256.	latin1Encodings := Array new: 256.	0 to: 255 do:[:i|		utf8 := (String new: 8) writeStream.		latin1 := String with: (Character value: i).		self new nextPut: latin1 first toStream: utf8.		utf8 := utf8 contents.		latin1 = utf8 ifTrue:[			latin1Map at: i+1 put: 0. "no translation needed"		] ifFalse:[			latin1Map at: i+1 put: 1. "translation needed"			latin1Encodings at: i+1 put: utf8.		].	].! !!TextConverter class methodsFor: 'accessing' stamp: 'nice 5/9/2009 23:34'!latin1Map	"Answer a ByteArray map telling if latin1 characters needs conversion or not"	^latin1Map ifNil:		[self initializeLatin1MapAndEncodings.		latin1Map]! !